generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    email          String        @unique
    password       String?
    emailConfirmed Boolean       @default(true)
    emailVerified  DateTime?
    avatarUrl      String?
    bio            String?
    totalBalance   Float?
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    image          String?
    role           String?
    Room           Room[]
    Otp            Otp[]
    Transaction    Transaction[]
    Category       Category[]
    Partner        Partner[]
    UserBudget     UserBudget[]
    Wallet         Wallet[]
    Account        Account[]
}

model Type {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String?
    Category    Category[]
    Partner     Partner[]
    Transaction Transaction[]
}

model Category {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String

    typeId String @db.ObjectId
    type   Type   @relation(fields: [typeId], references: [id])

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])

    deleted     Boolean
    description String?
    UserBudget  UserBudget[]
    Transaction Transaction[]
}

model Partner {
    id      String  @id @default(auto()) @map("_id") @db.ObjectId
    name    String
    deleted Boolean

    typeId String @db.ObjectId
    type   Type   @relation(fields: [typeId], references: [id])

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])

    contact     String?
    address     String?
    description String?
    email       String?
    Room        Room[]
    Transaction Transaction[]
}

model UserBudget {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    categoryId String   @db.ObjectId
    category   Category @relation(fields: [categoryId], references: [id])

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])

    expected String?
    actual   String?
    status   String?
}

model Wallet {
    id            String  @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    description   String?
    accountNumber String?
    color         String?

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])

    Transaction Transaction[]
}

model Room {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])

    partnerId String    @db.ObjectId
    partner   Partner   @relation(fields: [partnerId], references: [id])
    Message   Message[]
}

model Message {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    roomId String @db.ObjectId
    room   Room   @relation(fields: [roomId], references: [id])

    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    status    String
}

model Otp {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])

    code      String
    status    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Transaction {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])

    partnerId String  @db.ObjectId
    partner   Partner @relation(fields: [partnerId], references: [id])

    categoryId String   @db.ObjectId
    category   Category @relation(fields: [categoryId], references: [id])

    typeId String @db.ObjectId
    type   Type   @relation(fields: [typeId], references: [id])

    walletId String @db.ObjectId
    wallet   Wallet @relation(fields: [walletId], references: [id])

    amount          Float
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    description     String?
    invoiceImageUrl String?
}
